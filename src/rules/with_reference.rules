rule trim:
    input:
        R1_1=expand("{path}/output_demultiplex/Watson_R1.fq.gz", path=config["output_dir"]),
        R1_2=expand("{path}/output_demultiplex/Watson_R2.fq.gz", path=config["output_dir"]),
        R2_1=expand("{path}/output_demultiplex/Crick_R1.fq.gz", path=config["output_dir"]),
        R2_2=expand("{path}/output_demultiplex/Crick_R2.fq.gz", path=config["output_dir"])
    output:
        expand("{path}/trimmed/Watson_R1_trim.fq.gz", path=config["output_dir"]),
        expand("{path}/trimmed/Watson_R1_trim_fastqc.html", path=config["output_dir"]),
        expand("{path}/trimmed/Crick_R1_trim_fastqc.html", path=config["output_dir"]),
        expand("{path}/trimmed/Crick_R1_trim.fq.gz", path=config["output_dir"]),
        expand("{path}/trimmed/Watson_R2_trim.fq.gz", path=config["output_dir"]),
        expand("{path}/trimmed/Watson_R2_trim_fastqc.html", path=config["output_dir"]),
        expand("{path}/trimmed/Crick_R2_trim_fastqc.html", path=config["output_dir"]),
        expand("{path}/trimmed/Crick_R2_trim.fq.gz", path=config["output_dir"])
    params:
        dir=expand("{path}/trimmed/", path=config["output_dir"])
    conda:
        "../env/trim_galore.yaml"
    threads: 40

    log: expand("{path}/log/trim.log", path=config["output_dir"])

    shell:
        """
        trim_galore --paired -q 0 --fastqc {input.R1_1} {input.R1_2} {input.R2_1} {input.R2_2} -o {params.dir} > {log}
        cutadapt -u -10 -U -10 -m 10 -j {threads} -o {params.dir}/Watson_R1_trim.fq.gz -p {params.dir}/Watson_R2_trim.fq.gz {params.dir}/Watson_R1_val_1.fq.gz {params.dir}/Watson_R2_val_2.fq.gz >>{log}
        cutadapt -u -10 -U -10 -m 10 -j {threads} -o {params.dir}/Crick_R1_trim.fq.gz -p {params.dir}/Crick_R2_trim.fq.gz {params.dir}/Crick_R1_val_1.fq.gz {params.dir}/Crick_R2_val_2.fq.gz >>{log}
        fastqc -t {threads} --outdir {params.dir} {params.dir}/*_trim.fq.gz
        """
param_mq=config["param_SNPcalling"]["min-MQ"]
param_bq=config["param_SNPcalling"]["min-BQ"]
param_depth=config["param_SNPcalling"]["max-depth"]

def getParam_mq(param_mq):
    if param_mq == "default" or param_mq == "":
        print(param_mq)
        mq = 0
    else:
        mq = param_mq
    return mq
def getParam_bq(param_bq):
    if param_bq=="default" or param_bq == "":
        bq = 15
    else:
        bq = param_bq
    return bq
def getParam_dp(param_depth):
    if param_depth=="default" or param_depth == "":
        dep = 10000000
    else:
        dep = param_depth
    return dep

rule run_star:
    input:
        ref=expand("{path}/{ref}", path=config["ref_dir"], ref=config["genome"]),
        c_R1=expand("{path}/trimmed/Crick_R1_trim.fq.gz", path=config["output_dir"]),
        c_R2=expand("{path}/trimmed/Crick_R2_trim.fq.gz", path=config["output_dir"]),
        w_R1=expand("{path}/trimmed/Watson_R1_trim.fq.gz", path=config["output_dir"]),
        w_R2=expand("{path}/trimmed/Watson_R2_trim.fq.gz", path=config["output_dir"]),
        bar=expand("{path}/{bar}", path=config["input_dir"], bar=config["barcodes"])
    output:
        watsonBam=expand("{path}/mapping/watson.bam", path=config["output_dir"]),
        crickBam=expand("{path}/mapping/crick.bam", path=config["output_dir"])
    params:
        out_dir=expand("{path}{file}", path=config["output_dir"], file="/mapping"),
        tmp=expand("{tmp}", tmp=config["tmpdir"])
    threads: 40
    conda:
        "../env/environment.yaml"
    log:
        config["output_dir"] + "/log/log_STAR.txt"
    shell:
        "python src/mapping_varcall/map_STAR_ref.py "
        "--tmpdir {params.tmp} "
        "--barcodes {input.bar} "
        "--output_dir {params.out_dir} "
        "--threads {threads} "
        "--crick_val_r1 {input.c_R1} "
        "--crick_val_r2 {input.c_R2} "
        "--watson_val_r1 {input.w_R1} "
        "--watson_val_r2 {input.w_R2} "
        "--refgenome {input.ref} "

rule run_mpileup_watson:
    input:
        watsonBam=expand("{path}/mapping/watson.bam", path=config["output_dir"]),
        ref=expand("{path}/{ref}", path=config["ref_dir"], ref=config["genome"])
    output:
        watsonVCF=expand("{path}/mapping/watson.vcf.gz", path=config["output_dir"])
    params:
        out_dir=expand("{path}{file}", path=config["output_dir"], file="/mapping"),
        depth=getParam_dp(param_depth),
        mq=getParam_mq(param_mq),
        bq=getParam_bq(param_bq)
    conda:
        "../env/environment.yaml"
    shell:
        "samtools mpileup --reference {input.ref} "
        "-gt DP,AD,INFO/AD  --max-depth {params.depth} "
        "-q {params.mq} -Q {params.bq} "
        "--skip-indels "
        "-vu {input.watsonBam} | grep -v '^##contig='|bgzip -c > {output.watsonVCF}"

rule run_mpileup_crick:
    input:
        crickBam=expand("{path}/mapping/crick.bam", path=config["output_dir"]),
        ref=expand("{path}/{ref}", path=config["ref_dir"], ref=config["genome"])
    output:
        crickVCF=expand("{path}/mapping/crick.vcf.gz", path=config["output_dir"])
    params:
        out_dir=expand("{path}{file}", path=config["output_dir"], file="/mapping"),
        depth=getParam_dp(param_depth),
        mq=getParam_mq(param_mq),
        bq=getParam_bq(param_bq)
    conda:
        "../env/environment.yaml"
    shell:
        "samtools mpileup --reference {input.ref} "
        "-gt DP,AD,INFO/AD  --max-depth {params.depth} "
        "-q {params.mq} -Q {params.bq} "
        "--skip-indels "
        "-vu {input.crickBam} | grep -v '^##contig='|bgzip -c > {output.crickVCF}"

rule merge_watson_crick:
    input:
        watsonVCF=expand("{path}/mapping/watson.vcf.gz", path=config["output_dir"]),
        crickVCF=expand("{path}/mapping/crick.vcf.gz", path=config["output_dir"])
    output:
        mergedTSV=expand("{path}/mapping/merged.tsv.gz", path=config["output_dir"])
    params:
        mergedtsv=expand("{path}/mapping/merged.tsv", path=config["output_dir"])
    conda:
        "../env/environment.yaml"
    shell:
        "python src/mapping_varcall/merge_watson_crick-old.py "
        "-w {input.watsonVCF} "
        "-c {input.crickVCF} "
        "-o {params.mergedtsv}"

rule SNP_calling:
    input:
        watsonVCF=expand("{path}/mapping/watson.vcf.gz", path=config["output_dir"]),
        mergedTSV=expand("{path}/mapping/merged.tsv.gz", path=config["output_dir"])
    output:
        snpVCF=expand("{path}/mapping/snp.vcf.gz", path=config["output_dir"])
    params:
        snpvcf=expand("{path}/mapping/snp.vcf", path=config["output_dir"])
    conda:
        "../env/environment.yaml"
    shell:
        "python src/mapping_varcall/SNP_calling.py "
        "-m {input.mergedTSV} "
        "-w {input.watsonVCF} "
        "-s {params.snpvcf}"

rule methylation_calling:
    input:
        mergedTSV=expand("{path}/mapping/merged.tsv.gz", path=config["output_dir"]),
        snpVCF=expand("{path}/mapping/snp.vcf.gz", path=config["output_dir"]),
        ref=expand("{path}/{ref}", path=config["ref_dir"], ref=config["genome"])
    output:
        methylationBed=expand("{path}/mapping/methylation.bed", path=config["output_dir"]),
        methylationIGV=expand("{path}/mapping/heatmap.igv", path=config["output_dir"])
    conda:
        "../env/environment.yaml"
    shell:
        "python src/mapping_varcall/methylation_calling.py "
        "-r {input.ref} "
        "-m {input.mergedTSV} "
        "-o {output.methylationBed} "
        "-s {input.snpVCF}  "
        "-heat {output.methylationIGV}"



#rule mapping_ref:
#    input:
#        ref=expand("{path}/{ref}", path=config["ref_dir"], ref=config["genome"]),
#        c_R1=expand("{path}/trimmed/Crick_R1_val_1.fq.gz", path=config["output_dir"]),
#        c_R2=expand("{path}/trimmed/Crick_R2_val_2.fq.gz", path=config["output_dir"]),
#        w_R1=expand("{path}/trimmed/Watson_R1_val_1.fq.gz", path=config["output_dir"]),
#        w_R2=expand("{path}/trimmed/Watson_R2_val_2.fq.gz", path=config["output_dir"]),
#        bar=expand("{path}/{bar}", path=config["input_dir"], bar=config["barcodes"])
#
#    output:
#        expand("{path}/output_mapping/snp.vcf.gz", path=config["output_dir"]),
#        expand("{path}/output_mapping/methylation.bed", path=config["output_dir"])
#
#    params:
#        out_dir=expand("{path}{file}", path=config["output_dir"], file="/output_mapping"),
#        depth=getParam_dp(param_depth),
#        mq=getParam_mq(param_mq),
#        bq=getParam_bq(param_bq)
#    log: expand("{path}{file}", path=config["output_dir"], file="/log/mapping.log")
#
#    threads: 40
#    conda:
#        "../env/environment.yaml"
#	shell:
#		"python3 src/mapping_varcall/mapping_variant_calling_ref.py "
#		"--tmpdir {params.tmp} "
#		"--watson_val_r1 {input.w_R1} "
#		"--watson_val_r2 {input.w_R2} "
#                "--crick_val_r1 {input.c_R1} "
#                "--crick_val_r2 {input.c_R2} "
#		"--refgenome {input.ref} "
#		"--barcodes {input.bar} "
#		"--log {log} "
#		"--threads {threads} "
#		"--output_dir {params.out_dir} "
#		"--max_depth {params.depth} "
#		"--min_MQ {params.mq} "
#		"--min_BQ {params.bq} "

onerror:
    print("An error occurred, look into log files")
