rule report_ref:
    input:
      bed =expand("{path}/mapping/methylation.bed", path=config["output_dir"]),
      snp =expand("{path}/mapping/snp.vcf.gz", path=config["output_dir"]),
      multi =expand("{path}/multiQC_report.html", path=config["output_dir"])
      #clonelog =expand("{path}/output_demultiplex/demultiplex.log", path=config["output_dir"]),
      #stackslog = expand("{path}/output_demultiplex/clone-stacks/process_radtags.clone.log", path=config["output_dir"]),
      #maplog = expand("{path}/mapping/mapping_variantcalling.log", path=config["output_dir"]),
      #trim_W1 = expand("{path}/trimmed/Watson_R1.fq.gz_trimming_report.txt", path=config["output_dir"]),
      #trim_W2 = expand("{path}/trimmed/Watson_R1.fq.gz_trimming_report.txt", path=config["output_dir"]),
      #trim_C1 = expand("{path}/trimmed/Watson_R1.fq.gz_trimming_report.txt", path=config["output_dir"]),
      #trim_C2 = expand("{path}/trimmed/Watson_R1.fq.gz_trimming_report.txt", path=config["output_dir"]),
      #dir = expand("{path}", path=config["output_dir"])
    output:
      expand("{path}/report.html", path=config["output_dir"])
    conda: "../env/render.yaml"
    params:
      dir=expand("{path}", path=config["output_dir"])
    shell:
      """
      R -e "rmarkdown::render('src/report/report-ref.Rmd',output_file='report.html', params=list(dir='{params.dir}'))"
      mv src/report/report.html {params.dir}/report.html
      #mv src/report/report-files/ {params.dir}/
      """
